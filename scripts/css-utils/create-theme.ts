import { writeFileSync } from 'node:fs'
import { dirname, join } from 'node:path'
import { fileURLToPath } from 'node:url'
import { format as prettierFormat } from 'prettier'
import clampGenerator from './clamp-generator.ts'
import { TokenSchema } from './schema.ts'
import tokensToTailwind from './tokens-to-tailwind.ts'
import { type AllTokens, DEFAULT_ROOT_SIZE } from './types.ts'
import {
	getDefaultTokensDir,
	parseFile,
	type TokensDir,
} from './validation.ts'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

function loadAllTokens(tokensDir: TokensDir): AllTokens {
	const colors = parseFile(TokenSchema.Colors, tokensDir, 'colors.json')
	const fonts = parseFile(TokenSchema.Fonts, tokensDir, 'fonts.json')
	const spacing = parseFile(TokenSchema.Spacing, tokensDir, 'spacing.json')
	const leading = parseFile(TokenSchema.Leading, tokensDir, 'text-leading.json')
	const sizes = parseFile(TokenSchema.Sizes, tokensDir, 'text-sizes.json')
	const weights = parseFile(TokenSchema.Weights, tokensDir, 'text-weights.json')
	const viewports = parseFile(
		TokenSchema.Viewports,
		tokensDir,
		'viewports.json',
	)

	return { colors, fonts, spacing, leading, sizes, weights, viewports }
}

type CreateThemeOptions = {
	rootSize?: number
	tokensDir?: string
}

function createTheme(options: CreateThemeOptions = {}) {
	const rootSize = options.rootSize ?? DEFAULT_ROOT_SIZE
	const tokensDir = options.tokensDir ?? getDefaultTokensDir()
	const {
		colors: colorTokens,
		fonts: fontTokens,
		spacing: spacingTokens,
		leading: textLeadingTokens,
		sizes: textSizeTokens,
		weights: textWeightTokens,
		viewports: viewportTokens,
	} = loadAllTokens(tokensDir)

	const spacing = tokensToTailwind(
		clampGenerator(spacingTokens.items, viewportTokens, rootSize),
	)
	const colors = tokensToTailwind(colorTokens.items)
	const fontFamily = tokensToTailwind(fontTokens.items)
	const fontWeight = tokensToTailwind(
		textWeightTokens.items.map(({ name, value }) => ({
			name,
			value: String(value),
		})),
	)
	const fontSize = tokensToTailwind(
		clampGenerator(textSizeTokens.items, viewportTokens, rootSize),
	)
	const lineHeight = tokensToTailwind(
		textLeadingTokens.items.map(({ name, value }) => ({
			name,
			value: String(value),
		})),
	)

	// Helper function to convert token objects to CSS custom properties
	// https://tailwindcss.com/docs/theme#theme-variable-namespaces
	const formatTokens = (tokens: Record<string, string>, prefix: string) => {
		return Object.entries(tokens)
			.map(([key, value]) => `\t\t--${prefix}-${key}: ${value};`)
			.join('\n')
	}

	const header = `/* AUTO-GENERATED by scripts/css-utils/create-theme.ts on ${new Date().toISOString()} — Do NOT edit directly. */\n`

	const body = `@theme {
--breakpoint-sm: ${viewportTokens.min / rootSize}rem;
--breakpoint-md: ${viewportTokens.mid / rootSize}rem;
--breakpoint-lg: ${viewportTokens.max / rootSize}rem;
${formatTokens(spacing, 'spacing')}
--spacing-0: 0;
--spacing-auto: auto;
--spacing-full: 100%;
${formatTokens(colors, 'color')}
${formatTokens(fontFamily, 'font')}
${formatTokens(fontWeight, 'font-weight')}
${formatTokens(fontSize, 'text')}
${formatTokens(lineHeight, 'leading')}
	}`

	return header + body
}

type WriteThemeOptions = {
	outputPath?: string
	tokensDir?: string
	rootSize?: number
}

async function writeThemeToFile(
	options: WriteThemeOptions | string = 'theme.css',
) {
	const outputPath =
		typeof options === 'string' ? options : (options.outputPath ?? 'theme.css')
	const themeContent = createTheme(
		typeof options === 'string'
			? {}
			: { tokensDir: options.tokensDir, rootSize: options.rootSize },
	)
	const fullPath =
		outputPath.startsWith('/') || outputPath.includes(':')
			? outputPath
			: join(__dirname, '..', '..', outputPath)

	try {
		const formatted = await prettierFormat(themeContent, { filepath: fullPath })
		writeFileSync(fullPath, formatted, 'utf8')
	} catch (error) {
		throw new Error(
			`Failed to write theme file: ${error instanceof Error ? error.message : String(error)}`,
		)
	}
}

// CLI execution when run directly
async function handleCLI() {
	const args = process.argv.slice(2)
	let outputPath = 'theme.css'
	let outDir = ''
	let outFile = ''
	let tokensDir = ''
	let rootSize: number | undefined

	// Parse command line arguments
	for (let i = 0; i < args.length; i++) {
		if (args[i] === '--output' || args[i] === '-o') {
			if (i + 1 < args.length) {
				outputPath = args[i + 1]!
				i++ // Skip next argument as it's the value
			} else {
				// biome-ignore lint/suspicious/noConsole: CLI output is necessary
				console.error('Error: --output flag requires a path value')
				process.exit(1)
			}
		} else if (args[i] === '--out-dir') {
			if (i + 1 < args.length) {
				outDir = args[i + 1]!
				i++
			} else {
				console.error('Error: --out-dir flag requires a path value')
				process.exit(1)
			}
		} else if (args[i] === '--out-file') {
			if (i + 1 < args.length) {
				outFile = args[i + 1]!
				i++
			} else {
				console.error('Error: --out-file flag requires a file name')
				process.exit(1)
			}
		} else if (args[i] === '--tokens' || args[i] === '-t') {
			if (i + 1 < args.length) {
				tokensDir = args[i + 1]!
				i++
			} else {
				console.error('Error: --tokens flag requires a directory path')
				process.exit(1)
			}
		} else if (args[i] === '--root-size') {
			if (i + 1 < args.length) {
				rootSize = Number(args[i + 1])
				i++
			} else {
				console.error('Error: --root-size flag requires a numeric value')
				process.exit(1)
			}
		} else if (args[i] === '--help' || args[i] === '-h') {
			// biome-ignore lint/suspicious/noConsole: CLI output is necessary
			console.log(`
Usage: npm run theme [options]

Options:
  --output, -o <path>    Output path for the theme file (default: theme.css)
  --out-dir <path>       Output directory (alternative to --output)
  --out-file <name>      Output file name (use with --out-dir)
  --tokens, -t <dir>     Directory containing token JSON files
  --root-size <number>   Root font size in px used for rem conversion
  --help, -h             Show this help message

Examples:
  npm run theme                           # Creates theme.css in project root
  npm run theme -- --output dist/theme.css  # Creates theme file in dist folder
  npm run theme -- --out-dir src/css --out-file theme.css  # Split output options
  npm run theme -- --tokens src/design-tokens  # Use custom token directory
`)
			process.exit(0)
		} else if (args[i] && !args[i]!.startsWith('-')) {
			// If it's not a flag, treat it as output path for backward compatibility
			outputPath = args[i]!
		}
	}

	try {
		if (outDir || outFile) {
			const finalDir = outDir || dirname(outputPath)
			const finalFile = outFile || outputPath
			outputPath = join(finalDir, finalFile)
		}
		await writeThemeToFile({
			outputPath,
			tokensDir: tokensDir || undefined,
			rootSize,
		})
		// biome-ignore lint/suspicious/noConsole: CLI output is necessary
		console.log(`✅ Theme file created successfully at: ${outputPath}`)
	} catch (error) {
		const errorMessage = error instanceof Error ? error.message : String(error)
		// Format multi-line errors properly for better readability
		const formattedError = errorMessage.includes('\n')
			? `❌ Failed to create theme file:\n${errorMessage}`
			: `❌ Failed to create theme file: ${errorMessage}`

		// biome-ignore lint/suspicious/noConsole: CLI output is necessary
		console.error(formattedError)
		process.exit(1)
	}
}

// Check if this file is being run directly
if (import.meta.url === `file://${process.argv[1]}`) {
	await handleCLI()
}

// Export the write function for external use
export { writeThemeToFile, createTheme }
